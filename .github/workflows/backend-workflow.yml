name: Services Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**

  pull_request:
    types: [ opened, reopened, synchronize ]
    paths:
      - backend/**

env:
  SERVICES_BASE_DIR: ./backend
  SERVICES_DIST_DIR: ./backend/build/libs
  DEPLOYMENT_STACKNAME: backend-fargate-stack

jobs:
  build-job:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICES_BASE_DIR }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 22

      - name: Build and Test
        run: |
          ./gradlew clean test

  deploy-job:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: ["build-job"]
    defaults:
      run:
        working-directory: ${{ env.SERVICES_BASE_DIR }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v1

      - name: Install JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 22

      - name: Create Deployable Package
        run: |
          ./gradlew bootJar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Connect to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.DEPLOYMENT_STACKNAME }}-task-defn --query taskDefinition > task-definition.json

      - name: Build, tag, and push image to Amazon
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.DEPLOYMENT_STACKNAME }}-image
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.SERVICES_BASE_DIR }}/task-definition.json
          container-name: ${{ env.DEPLOYMENT_STACKNAME }}-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Image using Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.DEPLOYMENT_STACKNAME }}-service
          cluster: ${{ env.DEPLOYMENT_STACKNAME }}-cluster
          wait-for-service-stability: true